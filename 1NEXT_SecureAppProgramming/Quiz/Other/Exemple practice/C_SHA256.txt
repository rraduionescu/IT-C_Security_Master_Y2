#include<stdio.h>
#include<malloc.h>
#include<openssl/sha.h>

#define MESSAGE_CHUNK 256 //define length of chunks to be processed

int main()
{
	FILE* f = new FILE;
	errno_t error;
	unsigned char* buffer;
	SHA256_CTX context; //for computing the hash for given message
	unsigned char finalDigest[SHA256_DIGEST_LENGTH]; //for the final processing

	SHA256_Init(&context); //prepare context

	error = fopen_s(&f, "inClear.txt", "rb");

	if (error == 0)
	{
		fseek(f, 0, SEEK_END); //pozitionare la sfarsit
		int fileLength = ftell(f); //salvare lungime fisier
		fseek(f, 0, SEEK_SET); //poz la inceput de fisier

		buffer = (unsigned char*)malloc(sizeof(char)*fileLength); //alocare buffer
		fread(buffer, fileLength, 1, f);

		unsigned char* tempBuffer = buffer; //save initial text in temp buffer

		while (fileLength > 0) //while not end of file
		{
			if (fileLength > MESSAGE_CHUNK)
			{
				SHA256_Update(&context, tempBuffer, MESSAGE_CHUNK); //process current message chunk
			}
			else //the left message chunk is smaller than 128
			{
				SHA256_Update(&context, tempBuffer, fileLength);
			}
			fileLength -= MESSAGE_CHUNK; //update the length of the remaining message
			tempBuffer += MESSAGE_CHUNK; //move cursor to process the remainig message
		}

		SHA256_Final(finalDigest, &context); //process the final chunk

		//PRINT THE RESULT
		//hexa
		printf("Hex: ");
		for (int i = 0; i < SHA_DIGEST_LENGTH; i++)
			printf("%2X", finalDigest[i]);

		printf("\n");

		//string
		printf("String: %s", finalDigest);
		printf("\n");


	}
}